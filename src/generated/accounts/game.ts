/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI8Decoder,
  getI8Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getGameStateDecoder,
  getGameStateEncoder,
  type GameState,
  type GameStateArgs,
} from '../types';

export const GAME_DISCRIMINATOR = new Uint8Array([
  27, 90, 166, 125, 74, 100, 121, 18,
]);

export function getGameDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(GAME_DISCRIMINATOR);
}

export type Game = {
  discriminator: ReadonlyUint8Array;
  seed: bigint;
  bump: number;
  numPlayers: number;
  curPlayer: number;
  tokenPositions: Array<Array<number>>;
  gameState: GameState;
  currentRoll: number;
  sixCount: number;
  players: Array<Address>;
  winner: Address;
};

export type GameArgs = {
  seed: number | bigint;
  bump: number;
  numPlayers: number;
  curPlayer: number;
  tokenPositions: Array<Array<number>>;
  gameState: GameStateArgs;
  currentRoll: number;
  sixCount: number;
  players: Array<Address>;
  winner: Address;
};

export function getGameEncoder(): Encoder<GameArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['seed', getU64Encoder()],
      ['bump', getU8Encoder()],
      ['numPlayers', getU8Encoder()],
      ['curPlayer', getU8Encoder()],
      [
        'tokenPositions',
        getArrayEncoder(getArrayEncoder(getI8Encoder(), { size: 4 }), {
          size: 4,
        }),
      ],
      ['gameState', getGameStateEncoder()],
      ['currentRoll', getU8Encoder()],
      ['sixCount', getU8Encoder()],
      ['players', getArrayEncoder(getAddressEncoder(), { size: 4 })],
      ['winner', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: GAME_DISCRIMINATOR })
  );
}

export function getGameDecoder(): Decoder<Game> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['seed', getU64Decoder()],
    ['bump', getU8Decoder()],
    ['numPlayers', getU8Decoder()],
    ['curPlayer', getU8Decoder()],
    [
      'tokenPositions',
      getArrayDecoder(getArrayDecoder(getI8Decoder(), { size: 4 }), {
        size: 4,
      }),
    ],
    ['gameState', getGameStateDecoder()],
    ['currentRoll', getU8Decoder()],
    ['sixCount', getU8Decoder()],
    ['players', getArrayDecoder(getAddressDecoder(), { size: 4 })],
    ['winner', getAddressDecoder()],
  ]);
}

export function getGameCodec(): Codec<GameArgs, Game> {
  return combineCodec(getGameEncoder(), getGameDecoder());
}

export function decodeGame<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Game, TAddress>;
export function decodeGame<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Game, TAddress>;
export function decodeGame<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Game, TAddress> | MaybeAccount<Game, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getGameDecoder()
  );
}

export async function fetchGame<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Game, TAddress>> {
  const maybeAccount = await fetchMaybeGame(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeGame<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Game, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeGame(maybeAccount);
}

export async function fetchAllGame(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Game>[]> {
  const maybeAccounts = await fetchAllMaybeGame(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeGame(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Game>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeGame(maybeAccount));
}

export function getGameSize(): number {
  return 198;
}
