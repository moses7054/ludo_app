/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { LUDO_PROGRAM_ADDRESS } from '../programs';

/** InvalidNumPlayers:  */
export const LUDO_ERROR__INVALID_NUM_PLAYERS = 0x1770; // 6000
/** AnotherPlayerAlreadyJoined:  */
export const LUDO_ERROR__ANOTHER_PLAYER_ALREADY_JOINED = 0x1771; // 6001
/** GameAlreadyStarted:  */
export const LUDO_ERROR__GAME_ALREADY_STARTED = 0x1772; // 6002
/** WrongPlayer:  */
export const LUDO_ERROR__WRONG_PLAYER = 0x1773; // 6003
/** NeedToRunJoinAndStart:  */
export const LUDO_ERROR__NEED_TO_RUN_JOIN_AND_START = 0x1774; // 6004
/** NeedToRunJoin:  */
export const LUDO_ERROR__NEED_TO_RUN_JOIN = 0x1775; // 6005
/** PlayerAlreadyJoined:  */
export const LUDO_ERROR__PLAYER_ALREADY_JOINED = 0x1776; // 6006
/** ColorAlreadyTaken:  */
export const LUDO_ERROR__COLOR_ALREADY_TAKEN = 0x1777; // 6007
/** WrongGameState:  */
export const LUDO_ERROR__WRONG_GAME_STATE = 0x1778; // 6008
/** WrongMove:  */
export const LUDO_ERROR__WRONG_MOVE = 0x1779; // 6009
/** GameNotFinished:  */
export const LUDO_ERROR__GAME_NOT_FINISHED = 0x177a; // 6010

export type LudoError =
  | typeof LUDO_ERROR__ANOTHER_PLAYER_ALREADY_JOINED
  | typeof LUDO_ERROR__COLOR_ALREADY_TAKEN
  | typeof LUDO_ERROR__GAME_ALREADY_STARTED
  | typeof LUDO_ERROR__GAME_NOT_FINISHED
  | typeof LUDO_ERROR__INVALID_NUM_PLAYERS
  | typeof LUDO_ERROR__NEED_TO_RUN_JOIN
  | typeof LUDO_ERROR__NEED_TO_RUN_JOIN_AND_START
  | typeof LUDO_ERROR__PLAYER_ALREADY_JOINED
  | typeof LUDO_ERROR__WRONG_GAME_STATE
  | typeof LUDO_ERROR__WRONG_MOVE
  | typeof LUDO_ERROR__WRONG_PLAYER;

let ludoErrorMessages: Record<LudoError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  ludoErrorMessages = {
    [LUDO_ERROR__ANOTHER_PLAYER_ALREADY_JOINED]: ``,
    [LUDO_ERROR__COLOR_ALREADY_TAKEN]: ``,
    [LUDO_ERROR__GAME_ALREADY_STARTED]: ``,
    [LUDO_ERROR__GAME_NOT_FINISHED]: ``,
    [LUDO_ERROR__INVALID_NUM_PLAYERS]: ``,
    [LUDO_ERROR__NEED_TO_RUN_JOIN]: ``,
    [LUDO_ERROR__NEED_TO_RUN_JOIN_AND_START]: ``,
    [LUDO_ERROR__PLAYER_ALREADY_JOINED]: ``,
    [LUDO_ERROR__WRONG_GAME_STATE]: ``,
    [LUDO_ERROR__WRONG_MOVE]: ``,
    [LUDO_ERROR__WRONG_PLAYER]: ``,
  };
}

export function getLudoErrorMessage(code: LudoError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (ludoErrorMessages as Record<LudoError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isLudoError<TProgramErrorCode extends LudoError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    LUDO_PROGRAM_ADDRESS,
    code
  );
}
