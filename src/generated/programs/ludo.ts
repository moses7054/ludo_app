/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedCallbackRollDiceInstruction,
  type ParsedCallbackStartGameInstruction,
  type ParsedCancelGameInstruction,
  type ParsedCreateGameInstruction,
  type ParsedDelegateInstruction,
  type ParsedJoinAndStartGameDebugInstruction,
  type ParsedJoinAndStartGameInstruction,
  type ParsedJoinGameInstruction,
  type ParsedMakeMoveInstruction,
  type ParsedMoveTileDebugInstruction,
  type ParsedNextTurnDebugInstruction,
  type ParsedProcessUndelegationInstruction,
  type ParsedRollDiceDebugInstruction,
  type ParsedRollDiceDelegateInstruction,
  type ParsedTokenIntoPlayInstruction,
  type ParsedUndelegateInstruction,
} from '../instructions';

export const LUDO_PROGRAM_ADDRESS =
  'Ab2xsYDGv4GKKJc2wuKiGeqtXhP6ukJFNAHXvoCBVdHG' as Address<'Ab2xsYDGv4GKKJc2wuKiGeqtXhP6ukJFNAHXvoCBVdHG'>;

export enum LudoAccount {
  Game,
}

export function identifyLudoAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): LudoAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([27, 90, 166, 125, 74, 100, 121, 18])
      ),
      0
    )
  ) {
    return LudoAccount.Game;
  }
  throw new Error(
    'The provided account could not be identified as a ludo account.'
  );
}

export enum LudoInstruction {
  CallbackRollDice,
  CallbackStartGame,
  CancelGame,
  CreateGame,
  Delegate,
  JoinAndStartGame,
  JoinAndStartGameDebug,
  JoinGame,
  MakeMove,
  MoveTileDebug,
  NextTurnDebug,
  ProcessUndelegation,
  RollDiceDebug,
  RollDiceDelegate,
  TokenIntoPlay,
  Undelegate,
}

export function identifyLudoInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): LudoInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([129, 76, 217, 160, 252, 234, 19, 238])
      ),
      0
    )
  ) {
    return LudoInstruction.CallbackRollDice;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([3, 147, 200, 98, 29, 171, 39, 19])
      ),
      0
    )
  ) {
    return LudoInstruction.CallbackStartGame;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([121, 194, 154, 118, 103, 235, 149, 52])
      ),
      0
    )
  ) {
    return LudoInstruction.CancelGame;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([124, 69, 75, 66, 184, 220, 72, 206])
      ),
      0
    )
  ) {
    return LudoInstruction.CreateGame;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([90, 147, 75, 178, 85, 88, 4, 137])
      ),
      0
    )
  ) {
    return LudoInstruction.Delegate;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([55, 181, 88, 129, 183, 215, 31, 233])
      ),
      0
    )
  ) {
    return LudoInstruction.JoinAndStartGame;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([33, 67, 157, 125, 231, 2, 154, 167])
      ),
      0
    )
  ) {
    return LudoInstruction.JoinAndStartGameDebug;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([107, 112, 18, 38, 56, 173, 60, 128])
      ),
      0
    )
  ) {
    return LudoInstruction.JoinGame;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([78, 77, 152, 203, 222, 211, 208, 233])
      ),
      0
    )
  ) {
    return LudoInstruction.MakeMove;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([141, 131, 31, 193, 34, 225, 78, 225])
      ),
      0
    )
  ) {
    return LudoInstruction.MoveTileDebug;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([78, 188, 214, 126, 55, 42, 169, 207])
      ),
      0
    )
  ) {
    return LudoInstruction.NextTurnDebug;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([196, 28, 41, 206, 48, 37, 51, 167])
      ),
      0
    )
  ) {
    return LudoInstruction.ProcessUndelegation;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([118, 115, 227, 230, 100, 160, 161, 197])
      ),
      0
    )
  ) {
    return LudoInstruction.RollDiceDebug;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([34, 126, 96, 254, 186, 154, 24, 115])
      ),
      0
    )
  ) {
    return LudoInstruction.RollDiceDelegate;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([133, 158, 169, 60, 189, 217, 171, 66])
      ),
      0
    )
  ) {
    return LudoInstruction.TokenIntoPlay;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([131, 148, 180, 198, 91, 104, 42, 238])
      ),
      0
    )
  ) {
    return LudoInstruction.Undelegate;
  }
  throw new Error(
    'The provided instruction could not be identified as a ludo instruction.'
  );
}

export type ParsedLudoInstruction<
  TProgram extends string = 'Ab2xsYDGv4GKKJc2wuKiGeqtXhP6ukJFNAHXvoCBVdHG',
> =
  | ({
      instructionType: LudoInstruction.CallbackRollDice;
    } & ParsedCallbackRollDiceInstruction<TProgram>)
  | ({
      instructionType: LudoInstruction.CallbackStartGame;
    } & ParsedCallbackStartGameInstruction<TProgram>)
  | ({
      instructionType: LudoInstruction.CancelGame;
    } & ParsedCancelGameInstruction<TProgram>)
  | ({
      instructionType: LudoInstruction.CreateGame;
    } & ParsedCreateGameInstruction<TProgram>)
  | ({
      instructionType: LudoInstruction.Delegate;
    } & ParsedDelegateInstruction<TProgram>)
  | ({
      instructionType: LudoInstruction.JoinAndStartGame;
    } & ParsedJoinAndStartGameInstruction<TProgram>)
  | ({
      instructionType: LudoInstruction.JoinAndStartGameDebug;
    } & ParsedJoinAndStartGameDebugInstruction<TProgram>)
  | ({
      instructionType: LudoInstruction.JoinGame;
    } & ParsedJoinGameInstruction<TProgram>)
  | ({
      instructionType: LudoInstruction.MakeMove;
    } & ParsedMakeMoveInstruction<TProgram>)
  | ({
      instructionType: LudoInstruction.MoveTileDebug;
    } & ParsedMoveTileDebugInstruction<TProgram>)
  | ({
      instructionType: LudoInstruction.NextTurnDebug;
    } & ParsedNextTurnDebugInstruction<TProgram>)
  | ({
      instructionType: LudoInstruction.ProcessUndelegation;
    } & ParsedProcessUndelegationInstruction<TProgram>)
  | ({
      instructionType: LudoInstruction.RollDiceDebug;
    } & ParsedRollDiceDebugInstruction<TProgram>)
  | ({
      instructionType: LudoInstruction.RollDiceDelegate;
    } & ParsedRollDiceDelegateInstruction<TProgram>)
  | ({
      instructionType: LudoInstruction.TokenIntoPlay;
    } & ParsedTokenIntoPlayInstruction<TProgram>)
  | ({
      instructionType: LudoInstruction.Undelegate;
    } & ParsedUndelegateInstruction<TProgram>);
