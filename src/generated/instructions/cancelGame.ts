/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { LUDO_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getColorsDecoder,
  getColorsEncoder,
  type Colors,
  type ColorsArgs,
} from '../types';

export const CANCEL_GAME_DISCRIMINATOR = new Uint8Array([
  121, 194, 154, 118, 103, 235, 149, 52,
]);

export function getCancelGameDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CANCEL_GAME_DISCRIMINATOR);
}

export type CancelGameInstruction<
  TProgram extends string = typeof LUDO_PROGRAM_ADDRESS,
  TAccountPlayer extends string | IAccountMeta<string> = string,
  TAccountGame extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPlayer extends string
        ? WritableSignerAccount<TAccountPlayer> &
            IAccountSignerMeta<TAccountPlayer>
        : TAccountPlayer,
      TAccountGame extends string
        ? WritableAccount<TAccountGame>
        : TAccountGame,
      ...TRemainingAccounts,
    ]
  >;

export type CancelGameInstructionData = {
  discriminator: ReadonlyUint8Array;
  color: Colors;
};

export type CancelGameInstructionDataArgs = { color: ColorsArgs };

export function getCancelGameInstructionDataEncoder(): Encoder<CancelGameInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['color', getColorsEncoder()],
    ]),
    (value) => ({ ...value, discriminator: CANCEL_GAME_DISCRIMINATOR })
  );
}

export function getCancelGameInstructionDataDecoder(): Decoder<CancelGameInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['color', getColorsDecoder()],
  ]);
}

export function getCancelGameInstructionDataCodec(): Codec<
  CancelGameInstructionDataArgs,
  CancelGameInstructionData
> {
  return combineCodec(
    getCancelGameInstructionDataEncoder(),
    getCancelGameInstructionDataDecoder()
  );
}

export type CancelGameInput<
  TAccountPlayer extends string = string,
  TAccountGame extends string = string,
> = {
  player: TransactionSigner<TAccountPlayer>;
  game: Address<TAccountGame>;
  color: CancelGameInstructionDataArgs['color'];
};

export function getCancelGameInstruction<
  TAccountPlayer extends string,
  TAccountGame extends string,
  TProgramAddress extends Address = typeof LUDO_PROGRAM_ADDRESS,
>(
  input: CancelGameInput<TAccountPlayer, TAccountGame>,
  config?: { programAddress?: TProgramAddress }
): CancelGameInstruction<TProgramAddress, TAccountPlayer, TAccountGame> {
  // Program address.
  const programAddress = config?.programAddress ?? LUDO_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    player: { value: input.player ?? null, isWritable: true },
    game: { value: input.game ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [getAccountMeta(accounts.player), getAccountMeta(accounts.game)],
    programAddress,
    data: getCancelGameInstructionDataEncoder().encode(
      args as CancelGameInstructionDataArgs
    ),
  } as CancelGameInstruction<TProgramAddress, TAccountPlayer, TAccountGame>;

  return instruction;
}

export type ParsedCancelGameInstruction<
  TProgram extends string = typeof LUDO_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    player: TAccountMetas[0];
    game: TAccountMetas[1];
  };
  data: CancelGameInstructionData;
};

export function parseCancelGameInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCancelGameInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      player: getNextAccount(),
      game: getNextAccount(),
    },
    data: getCancelGameInstructionDataDecoder().decode(instruction.data),
  };
}
