/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { LUDO_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CALLBACK_START_GAME_DISCRIMINATOR = new Uint8Array([
  3, 147, 200, 98, 29, 171, 39, 19,
]);

export function getCallbackStartGameDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CALLBACK_START_GAME_DISCRIMINATOR
  );
}

export type CallbackStartGameInstruction<
  TProgram extends string = typeof LUDO_PROGRAM_ADDRESS,
  TAccountVrfProgramIdentity extends
    | string
    | IAccountMeta<string> = '9irBy75QS2BN81FUgXuHcjqceJJRuc9oDkAe8TKVvvAw',
  TAccountGame extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountVrfProgramIdentity extends string
        ? ReadonlySignerAccount<TAccountVrfProgramIdentity> &
            IAccountSignerMeta<TAccountVrfProgramIdentity>
        : TAccountVrfProgramIdentity,
      TAccountGame extends string
        ? WritableAccount<TAccountGame>
        : TAccountGame,
      ...TRemainingAccounts,
    ]
  >;

export type CallbackStartGameInstructionData = {
  discriminator: ReadonlyUint8Array;
  randomness: ReadonlyUint8Array;
};

export type CallbackStartGameInstructionDataArgs = {
  randomness: ReadonlyUint8Array;
};

export function getCallbackStartGameInstructionDataEncoder(): Encoder<CallbackStartGameInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['randomness', fixEncoderSize(getBytesEncoder(), 32)],
    ]),
    (value) => ({ ...value, discriminator: CALLBACK_START_GAME_DISCRIMINATOR })
  );
}

export function getCallbackStartGameInstructionDataDecoder(): Decoder<CallbackStartGameInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['randomness', fixDecoderSize(getBytesDecoder(), 32)],
  ]);
}

export function getCallbackStartGameInstructionDataCodec(): Codec<
  CallbackStartGameInstructionDataArgs,
  CallbackStartGameInstructionData
> {
  return combineCodec(
    getCallbackStartGameInstructionDataEncoder(),
    getCallbackStartGameInstructionDataDecoder()
  );
}

export type CallbackStartGameInput<
  TAccountVrfProgramIdentity extends string = string,
  TAccountGame extends string = string,
> = {
  /**
   * This check ensure that the vrf_program_identity (which is a PDA) is a singer
   * enforcing the callback is executed by the VRF program through CPI
   */
  vrfProgramIdentity?: TransactionSigner<TAccountVrfProgramIdentity>;
  game: Address<TAccountGame>;
  randomness: CallbackStartGameInstructionDataArgs['randomness'];
};

export function getCallbackStartGameInstruction<
  TAccountVrfProgramIdentity extends string,
  TAccountGame extends string,
  TProgramAddress extends Address = typeof LUDO_PROGRAM_ADDRESS,
>(
  input: CallbackStartGameInput<TAccountVrfProgramIdentity, TAccountGame>,
  config?: { programAddress?: TProgramAddress }
): CallbackStartGameInstruction<
  TProgramAddress,
  TAccountVrfProgramIdentity,
  TAccountGame
> {
  // Program address.
  const programAddress = config?.programAddress ?? LUDO_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    vrfProgramIdentity: {
      value: input.vrfProgramIdentity ?? null,
      isWritable: false,
    },
    game: { value: input.game ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.vrfProgramIdentity.value) {
    accounts.vrfProgramIdentity.value =
      '9irBy75QS2BN81FUgXuHcjqceJJRuc9oDkAe8TKVvvAw' as Address<'9irBy75QS2BN81FUgXuHcjqceJJRuc9oDkAe8TKVvvAw'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.vrfProgramIdentity),
      getAccountMeta(accounts.game),
    ],
    programAddress,
    data: getCallbackStartGameInstructionDataEncoder().encode(
      args as CallbackStartGameInstructionDataArgs
    ),
  } as CallbackStartGameInstruction<
    TProgramAddress,
    TAccountVrfProgramIdentity,
    TAccountGame
  >;

  return instruction;
}

export type ParsedCallbackStartGameInstruction<
  TProgram extends string = typeof LUDO_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /**
     * This check ensure that the vrf_program_identity (which is a PDA) is a singer
     * enforcing the callback is executed by the VRF program through CPI
     */

    vrfProgramIdentity: TAccountMetas[0];
    game: TAccountMetas[1];
  };
  data: CallbackStartGameInstructionData;
};

export function parseCallbackStartGameInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCallbackStartGameInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      vrfProgramIdentity: getNextAccount(),
      game: getNextAccount(),
    },
    data: getCallbackStartGameInstructionDataDecoder().decode(instruction.data),
  };
}
