/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { LUDO_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const UNDELEGATE_DISCRIMINATOR = new Uint8Array([
  131, 148, 180, 198, 91, 104, 42, 238,
]);

export function getUndelegateDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(UNDELEGATE_DISCRIMINATOR);
}

export type UndelegateInstruction<
  TProgram extends string = typeof LUDO_PROGRAM_ADDRESS,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountGame extends string | IAccountMeta<string> = string,
  TAccountMagicProgram extends
    | string
    | IAccountMeta<string> = 'Magic11111111111111111111111111111111111111',
  TAccountMagicContext extends
    | string
    | IAccountMeta<string> = 'MagicContext1111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountGame extends string
        ? WritableAccount<TAccountGame>
        : TAccountGame,
      TAccountMagicProgram extends string
        ? ReadonlyAccount<TAccountMagicProgram>
        : TAccountMagicProgram,
      TAccountMagicContext extends string
        ? WritableAccount<TAccountMagicContext>
        : TAccountMagicContext,
      ...TRemainingAccounts,
    ]
  >;

export type UndelegateInstructionData = { discriminator: ReadonlyUint8Array };

export type UndelegateInstructionDataArgs = {};

export function getUndelegateInstructionDataEncoder(): Encoder<UndelegateInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: UNDELEGATE_DISCRIMINATOR })
  );
}

export function getUndelegateInstructionDataDecoder(): Decoder<UndelegateInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getUndelegateInstructionDataCodec(): Codec<
  UndelegateInstructionDataArgs,
  UndelegateInstructionData
> {
  return combineCodec(
    getUndelegateInstructionDataEncoder(),
    getUndelegateInstructionDataDecoder()
  );
}

export type UndelegateInput<
  TAccountPayer extends string = string,
  TAccountGame extends string = string,
  TAccountMagicProgram extends string = string,
  TAccountMagicContext extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  game: Address<TAccountGame>;
  magicProgram?: Address<TAccountMagicProgram>;
  magicContext?: Address<TAccountMagicContext>;
};

export function getUndelegateInstruction<
  TAccountPayer extends string,
  TAccountGame extends string,
  TAccountMagicProgram extends string,
  TAccountMagicContext extends string,
  TProgramAddress extends Address = typeof LUDO_PROGRAM_ADDRESS,
>(
  input: UndelegateInput<
    TAccountPayer,
    TAccountGame,
    TAccountMagicProgram,
    TAccountMagicContext
  >,
  config?: { programAddress?: TProgramAddress }
): UndelegateInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountGame,
  TAccountMagicProgram,
  TAccountMagicContext
> {
  // Program address.
  const programAddress = config?.programAddress ?? LUDO_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    game: { value: input.game ?? null, isWritable: true },
    magicProgram: { value: input.magicProgram ?? null, isWritable: false },
    magicContext: { value: input.magicContext ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.magicProgram.value) {
    accounts.magicProgram.value =
      'Magic11111111111111111111111111111111111111' as Address<'Magic11111111111111111111111111111111111111'>;
  }
  if (!accounts.magicContext.value) {
    accounts.magicContext.value =
      'MagicContext1111111111111111111111111111111' as Address<'MagicContext1111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.game),
      getAccountMeta(accounts.magicProgram),
      getAccountMeta(accounts.magicContext),
    ],
    programAddress,
    data: getUndelegateInstructionDataEncoder().encode({}),
  } as UndelegateInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountGame,
    TAccountMagicProgram,
    TAccountMagicContext
  >;

  return instruction;
}

export type ParsedUndelegateInstruction<
  TProgram extends string = typeof LUDO_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    game: TAccountMetas[1];
    magicProgram: TAccountMetas[2];
    magicContext: TAccountMetas[3];
  };
  data: UndelegateInstructionData;
};

export function parseUndelegateInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedUndelegateInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      game: getNextAccount(),
      magicProgram: getNextAccount(),
      magicContext: getNextAccount(),
    },
    data: getUndelegateInstructionDataDecoder().decode(instruction.data),
  };
}
