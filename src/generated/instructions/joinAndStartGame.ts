/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { LUDO_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getColorsDecoder,
  getColorsEncoder,
  type Colors,
  type ColorsArgs,
} from '../types';

export const JOIN_AND_START_GAME_DISCRIMINATOR = new Uint8Array([
  55, 181, 88, 129, 183, 215, 31, 233,
]);

export function getJoinAndStartGameDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    JOIN_AND_START_GAME_DISCRIMINATOR
  );
}

export type JoinAndStartGameInstruction<
  TProgram extends string = typeof LUDO_PROGRAM_ADDRESS,
  TAccountPlayer extends string | IAccountMeta<string> = string,
  TAccountGame extends string | IAccountMeta<string> = string,
  TAccountOracleQueue extends
    | string
    | IAccountMeta<string> = '5hBR571xnXppuCPveTrctfTU7tJLSN94nq7kv7FRK5Tc',
  TAccountProgramIdentity extends string | IAccountMeta<string> = string,
  TAccountVrfProgram extends
    | string
    | IAccountMeta<string> = 'Vrf1RNUjXmQGjmQrQLvJHs9SNkvDJEsRVFPkfSQUwGz',
  TAccountSlotHashes extends
    | string
    | IAccountMeta<string> = 'SysvarS1otHashes111111111111111111111111111',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPlayer extends string
        ? WritableSignerAccount<TAccountPlayer> &
            IAccountSignerMeta<TAccountPlayer>
        : TAccountPlayer,
      TAccountGame extends string
        ? WritableAccount<TAccountGame>
        : TAccountGame,
      TAccountOracleQueue extends string
        ? WritableAccount<TAccountOracleQueue>
        : TAccountOracleQueue,
      TAccountProgramIdentity extends string
        ? ReadonlyAccount<TAccountProgramIdentity>
        : TAccountProgramIdentity,
      TAccountVrfProgram extends string
        ? ReadonlyAccount<TAccountVrfProgram>
        : TAccountVrfProgram,
      TAccountSlotHashes extends string
        ? ReadonlyAccount<TAccountSlotHashes>
        : TAccountSlotHashes,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type JoinAndStartGameInstructionData = {
  discriminator: ReadonlyUint8Array;
  color: Colors;
  clientSeed: number;
};

export type JoinAndStartGameInstructionDataArgs = {
  color: ColorsArgs;
  clientSeed: number;
};

export function getJoinAndStartGameInstructionDataEncoder(): Encoder<JoinAndStartGameInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['color', getColorsEncoder()],
      ['clientSeed', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: JOIN_AND_START_GAME_DISCRIMINATOR })
  );
}

export function getJoinAndStartGameInstructionDataDecoder(): Decoder<JoinAndStartGameInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['color', getColorsDecoder()],
    ['clientSeed', getU8Decoder()],
  ]);
}

export function getJoinAndStartGameInstructionDataCodec(): Codec<
  JoinAndStartGameInstructionDataArgs,
  JoinAndStartGameInstructionData
> {
  return combineCodec(
    getJoinAndStartGameInstructionDataEncoder(),
    getJoinAndStartGameInstructionDataDecoder()
  );
}

export type JoinAndStartGameAsyncInput<
  TAccountPlayer extends string = string,
  TAccountGame extends string = string,
  TAccountOracleQueue extends string = string,
  TAccountProgramIdentity extends string = string,
  TAccountVrfProgram extends string = string,
  TAccountSlotHashes extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  player: TransactionSigner<TAccountPlayer>;
  game: Address<TAccountGame>;
  oracleQueue?: Address<TAccountOracleQueue>;
  programIdentity?: Address<TAccountProgramIdentity>;
  vrfProgram?: Address<TAccountVrfProgram>;
  slotHashes?: Address<TAccountSlotHashes>;
  systemProgram?: Address<TAccountSystemProgram>;
  color: JoinAndStartGameInstructionDataArgs['color'];
  clientSeed: JoinAndStartGameInstructionDataArgs['clientSeed'];
};

export async function getJoinAndStartGameInstructionAsync<
  TAccountPlayer extends string,
  TAccountGame extends string,
  TAccountOracleQueue extends string,
  TAccountProgramIdentity extends string,
  TAccountVrfProgram extends string,
  TAccountSlotHashes extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof LUDO_PROGRAM_ADDRESS,
>(
  input: JoinAndStartGameAsyncInput<
    TAccountPlayer,
    TAccountGame,
    TAccountOracleQueue,
    TAccountProgramIdentity,
    TAccountVrfProgram,
    TAccountSlotHashes,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  JoinAndStartGameInstruction<
    TProgramAddress,
    TAccountPlayer,
    TAccountGame,
    TAccountOracleQueue,
    TAccountProgramIdentity,
    TAccountVrfProgram,
    TAccountSlotHashes,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? LUDO_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    player: { value: input.player ?? null, isWritable: true },
    game: { value: input.game ?? null, isWritable: true },
    oracleQueue: { value: input.oracleQueue ?? null, isWritable: true },
    programIdentity: {
      value: input.programIdentity ?? null,
      isWritable: false,
    },
    vrfProgram: { value: input.vrfProgram ?? null, isWritable: false },
    slotHashes: { value: input.slotHashes ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.oracleQueue.value) {
    accounts.oracleQueue.value =
      '5hBR571xnXppuCPveTrctfTU7tJLSN94nq7kv7FRK5Tc' as Address<'5hBR571xnXppuCPveTrctfTU7tJLSN94nq7kv7FRK5Tc'>;
  }
  if (!accounts.programIdentity.value) {
    accounts.programIdentity.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([105, 100, 101, 110, 116, 105, 116, 121])
        ),
      ],
    });
  }
  if (!accounts.vrfProgram.value) {
    accounts.vrfProgram.value =
      'Vrf1RNUjXmQGjmQrQLvJHs9SNkvDJEsRVFPkfSQUwGz' as Address<'Vrf1RNUjXmQGjmQrQLvJHs9SNkvDJEsRVFPkfSQUwGz'>;
  }
  if (!accounts.slotHashes.value) {
    accounts.slotHashes.value =
      'SysvarS1otHashes111111111111111111111111111' as Address<'SysvarS1otHashes111111111111111111111111111'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.player),
      getAccountMeta(accounts.game),
      getAccountMeta(accounts.oracleQueue),
      getAccountMeta(accounts.programIdentity),
      getAccountMeta(accounts.vrfProgram),
      getAccountMeta(accounts.slotHashes),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getJoinAndStartGameInstructionDataEncoder().encode(
      args as JoinAndStartGameInstructionDataArgs
    ),
  } as JoinAndStartGameInstruction<
    TProgramAddress,
    TAccountPlayer,
    TAccountGame,
    TAccountOracleQueue,
    TAccountProgramIdentity,
    TAccountVrfProgram,
    TAccountSlotHashes,
    TAccountSystemProgram
  >;

  return instruction;
}

export type JoinAndStartGameInput<
  TAccountPlayer extends string = string,
  TAccountGame extends string = string,
  TAccountOracleQueue extends string = string,
  TAccountProgramIdentity extends string = string,
  TAccountVrfProgram extends string = string,
  TAccountSlotHashes extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  player: TransactionSigner<TAccountPlayer>;
  game: Address<TAccountGame>;
  oracleQueue?: Address<TAccountOracleQueue>;
  programIdentity: Address<TAccountProgramIdentity>;
  vrfProgram?: Address<TAccountVrfProgram>;
  slotHashes?: Address<TAccountSlotHashes>;
  systemProgram?: Address<TAccountSystemProgram>;
  color: JoinAndStartGameInstructionDataArgs['color'];
  clientSeed: JoinAndStartGameInstructionDataArgs['clientSeed'];
};

export function getJoinAndStartGameInstruction<
  TAccountPlayer extends string,
  TAccountGame extends string,
  TAccountOracleQueue extends string,
  TAccountProgramIdentity extends string,
  TAccountVrfProgram extends string,
  TAccountSlotHashes extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof LUDO_PROGRAM_ADDRESS,
>(
  input: JoinAndStartGameInput<
    TAccountPlayer,
    TAccountGame,
    TAccountOracleQueue,
    TAccountProgramIdentity,
    TAccountVrfProgram,
    TAccountSlotHashes,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): JoinAndStartGameInstruction<
  TProgramAddress,
  TAccountPlayer,
  TAccountGame,
  TAccountOracleQueue,
  TAccountProgramIdentity,
  TAccountVrfProgram,
  TAccountSlotHashes,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? LUDO_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    player: { value: input.player ?? null, isWritable: true },
    game: { value: input.game ?? null, isWritable: true },
    oracleQueue: { value: input.oracleQueue ?? null, isWritable: true },
    programIdentity: {
      value: input.programIdentity ?? null,
      isWritable: false,
    },
    vrfProgram: { value: input.vrfProgram ?? null, isWritable: false },
    slotHashes: { value: input.slotHashes ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.oracleQueue.value) {
    accounts.oracleQueue.value =
      '5hBR571xnXppuCPveTrctfTU7tJLSN94nq7kv7FRK5Tc' as Address<'5hBR571xnXppuCPveTrctfTU7tJLSN94nq7kv7FRK5Tc'>;
  }
  if (!accounts.vrfProgram.value) {
    accounts.vrfProgram.value =
      'Vrf1RNUjXmQGjmQrQLvJHs9SNkvDJEsRVFPkfSQUwGz' as Address<'Vrf1RNUjXmQGjmQrQLvJHs9SNkvDJEsRVFPkfSQUwGz'>;
  }
  if (!accounts.slotHashes.value) {
    accounts.slotHashes.value =
      'SysvarS1otHashes111111111111111111111111111' as Address<'SysvarS1otHashes111111111111111111111111111'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.player),
      getAccountMeta(accounts.game),
      getAccountMeta(accounts.oracleQueue),
      getAccountMeta(accounts.programIdentity),
      getAccountMeta(accounts.vrfProgram),
      getAccountMeta(accounts.slotHashes),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getJoinAndStartGameInstructionDataEncoder().encode(
      args as JoinAndStartGameInstructionDataArgs
    ),
  } as JoinAndStartGameInstruction<
    TProgramAddress,
    TAccountPlayer,
    TAccountGame,
    TAccountOracleQueue,
    TAccountProgramIdentity,
    TAccountVrfProgram,
    TAccountSlotHashes,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedJoinAndStartGameInstruction<
  TProgram extends string = typeof LUDO_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    player: TAccountMetas[0];
    game: TAccountMetas[1];
    oracleQueue: TAccountMetas[2];
    programIdentity: TAccountMetas[3];
    vrfProgram: TAccountMetas[4];
    slotHashes: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
  };
  data: JoinAndStartGameInstructionData;
};

export function parseJoinAndStartGameInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedJoinAndStartGameInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      player: getNextAccount(),
      game: getNextAccount(),
      oracleQueue: getNextAccount(),
      programIdentity: getNextAccount(),
      vrfProgram: getNextAccount(),
      slotHashes: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getJoinAndStartGameInstructionDataDecoder().decode(instruction.data),
  };
}
