/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { LUDO_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const DELEGATE_DISCRIMINATOR = new Uint8Array([
  90, 147, 75, 178, 85, 88, 4, 137,
]);

export function getDelegateDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(DELEGATE_DISCRIMINATOR);
}

export type DelegateInstruction<
  TProgram extends string = typeof LUDO_PROGRAM_ADDRESS,
  TAccountUser extends string | IAccountMeta<string> = string,
  TAccountBufferGame extends string | IAccountMeta<string> = string,
  TAccountDelegationRecordGame extends string | IAccountMeta<string> = string,
  TAccountDelegationMetadataGame extends string | IAccountMeta<string> = string,
  TAccountGame extends string | IAccountMeta<string> = string,
  TAccountOwnerProgram extends
    | string
    | IAccountMeta<string> = 'Ab2xsYDGv4GKKJc2wuKiGeqtXhP6ukJFNAHXvoCBVdHG',
  TAccountDelegationProgram extends
    | string
    | IAccountMeta<string> = 'DELeGGvXpWV2fqJUhqcF5ZSYMS4JTLjteaAMARRSaeSh',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountUser extends string
        ? WritableSignerAccount<TAccountUser> & IAccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountBufferGame extends string
        ? WritableAccount<TAccountBufferGame>
        : TAccountBufferGame,
      TAccountDelegationRecordGame extends string
        ? WritableAccount<TAccountDelegationRecordGame>
        : TAccountDelegationRecordGame,
      TAccountDelegationMetadataGame extends string
        ? WritableAccount<TAccountDelegationMetadataGame>
        : TAccountDelegationMetadataGame,
      TAccountGame extends string
        ? WritableAccount<TAccountGame>
        : TAccountGame,
      TAccountOwnerProgram extends string
        ? ReadonlyAccount<TAccountOwnerProgram>
        : TAccountOwnerProgram,
      TAccountDelegationProgram extends string
        ? ReadonlyAccount<TAccountDelegationProgram>
        : TAccountDelegationProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type DelegateInstructionData = { discriminator: ReadonlyUint8Array };

export type DelegateInstructionDataArgs = {};

export function getDelegateInstructionDataEncoder(): Encoder<DelegateInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: DELEGATE_DISCRIMINATOR })
  );
}

export function getDelegateInstructionDataDecoder(): Decoder<DelegateInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getDelegateInstructionDataCodec(): Codec<
  DelegateInstructionDataArgs,
  DelegateInstructionData
> {
  return combineCodec(
    getDelegateInstructionDataEncoder(),
    getDelegateInstructionDataDecoder()
  );
}

export type DelegateAsyncInput<
  TAccountUser extends string = string,
  TAccountBufferGame extends string = string,
  TAccountDelegationRecordGame extends string = string,
  TAccountDelegationMetadataGame extends string = string,
  TAccountGame extends string = string,
  TAccountOwnerProgram extends string = string,
  TAccountDelegationProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  user: TransactionSigner<TAccountUser>;
  bufferGame?: Address<TAccountBufferGame>;
  delegationRecordGame?: Address<TAccountDelegationRecordGame>;
  delegationMetadataGame?: Address<TAccountDelegationMetadataGame>;
  /** CHECK The pda to delegate */
  game: Address<TAccountGame>;
  ownerProgram?: Address<TAccountOwnerProgram>;
  delegationProgram?: Address<TAccountDelegationProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getDelegateInstructionAsync<
  TAccountUser extends string,
  TAccountBufferGame extends string,
  TAccountDelegationRecordGame extends string,
  TAccountDelegationMetadataGame extends string,
  TAccountGame extends string,
  TAccountOwnerProgram extends string,
  TAccountDelegationProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof LUDO_PROGRAM_ADDRESS,
>(
  input: DelegateAsyncInput<
    TAccountUser,
    TAccountBufferGame,
    TAccountDelegationRecordGame,
    TAccountDelegationMetadataGame,
    TAccountGame,
    TAccountOwnerProgram,
    TAccountDelegationProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  DelegateInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountBufferGame,
    TAccountDelegationRecordGame,
    TAccountDelegationMetadataGame,
    TAccountGame,
    TAccountOwnerProgram,
    TAccountDelegationProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? LUDO_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    user: { value: input.user ?? null, isWritable: true },
    bufferGame: { value: input.bufferGame ?? null, isWritable: true },
    delegationRecordGame: {
      value: input.delegationRecordGame ?? null,
      isWritable: true,
    },
    delegationMetadataGame: {
      value: input.delegationMetadataGame ?? null,
      isWritable: true,
    },
    game: { value: input.game ?? null, isWritable: true },
    ownerProgram: { value: input.ownerProgram ?? null, isWritable: false },
    delegationProgram: {
      value: input.delegationProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.bufferGame.value) {
    accounts.bufferGame.value = await getProgramDerivedAddress({
      programAddress:
        'Ab2xsYDGv4GKKJc2wuKiGeqtXhP6ukJFNAHXvoCBVdHG' as Address<'Ab2xsYDGv4GKKJc2wuKiGeqtXhP6ukJFNAHXvoCBVdHG'>,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([98, 117, 102, 102, 101, 114])),
        getAddressEncoder().encode(expectAddress(accounts.game.value)),
      ],
    });
  }
  if (!accounts.delegationRecordGame.value) {
    accounts.delegationRecordGame.value = await getProgramDerivedAddress({
      programAddress:
        'DELeGGvXpWV2fqJUhqcF5ZSYMS4JTLjteaAMARRSaeSh' as Address<'DELeGGvXpWV2fqJUhqcF5ZSYMS4JTLjteaAMARRSaeSh'>,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([100, 101, 108, 101, 103, 97, 116, 105, 111, 110])
        ),
        getAddressEncoder().encode(expectAddress(accounts.game.value)),
      ],
    });
  }
  if (!accounts.delegationMetadataGame.value) {
    accounts.delegationMetadataGame.value = await getProgramDerivedAddress({
      programAddress:
        'DELeGGvXpWV2fqJUhqcF5ZSYMS4JTLjteaAMARRSaeSh' as Address<'DELeGGvXpWV2fqJUhqcF5ZSYMS4JTLjteaAMARRSaeSh'>,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            100, 101, 108, 101, 103, 97, 116, 105, 111, 110, 45, 109, 101, 116,
            97, 100, 97, 116, 97,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.game.value)),
      ],
    });
  }
  if (!accounts.ownerProgram.value) {
    accounts.ownerProgram.value =
      'Ab2xsYDGv4GKKJc2wuKiGeqtXhP6ukJFNAHXvoCBVdHG' as Address<'Ab2xsYDGv4GKKJc2wuKiGeqtXhP6ukJFNAHXvoCBVdHG'>;
  }
  if (!accounts.delegationProgram.value) {
    accounts.delegationProgram.value =
      'DELeGGvXpWV2fqJUhqcF5ZSYMS4JTLjteaAMARRSaeSh' as Address<'DELeGGvXpWV2fqJUhqcF5ZSYMS4JTLjteaAMARRSaeSh'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.bufferGame),
      getAccountMeta(accounts.delegationRecordGame),
      getAccountMeta(accounts.delegationMetadataGame),
      getAccountMeta(accounts.game),
      getAccountMeta(accounts.ownerProgram),
      getAccountMeta(accounts.delegationProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getDelegateInstructionDataEncoder().encode({}),
  } as DelegateInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountBufferGame,
    TAccountDelegationRecordGame,
    TAccountDelegationMetadataGame,
    TAccountGame,
    TAccountOwnerProgram,
    TAccountDelegationProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type DelegateInput<
  TAccountUser extends string = string,
  TAccountBufferGame extends string = string,
  TAccountDelegationRecordGame extends string = string,
  TAccountDelegationMetadataGame extends string = string,
  TAccountGame extends string = string,
  TAccountOwnerProgram extends string = string,
  TAccountDelegationProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  user: TransactionSigner<TAccountUser>;
  bufferGame: Address<TAccountBufferGame>;
  delegationRecordGame: Address<TAccountDelegationRecordGame>;
  delegationMetadataGame: Address<TAccountDelegationMetadataGame>;
  /** CHECK The pda to delegate */
  game: Address<TAccountGame>;
  ownerProgram?: Address<TAccountOwnerProgram>;
  delegationProgram?: Address<TAccountDelegationProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getDelegateInstruction<
  TAccountUser extends string,
  TAccountBufferGame extends string,
  TAccountDelegationRecordGame extends string,
  TAccountDelegationMetadataGame extends string,
  TAccountGame extends string,
  TAccountOwnerProgram extends string,
  TAccountDelegationProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof LUDO_PROGRAM_ADDRESS,
>(
  input: DelegateInput<
    TAccountUser,
    TAccountBufferGame,
    TAccountDelegationRecordGame,
    TAccountDelegationMetadataGame,
    TAccountGame,
    TAccountOwnerProgram,
    TAccountDelegationProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): DelegateInstruction<
  TProgramAddress,
  TAccountUser,
  TAccountBufferGame,
  TAccountDelegationRecordGame,
  TAccountDelegationMetadataGame,
  TAccountGame,
  TAccountOwnerProgram,
  TAccountDelegationProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? LUDO_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    user: { value: input.user ?? null, isWritable: true },
    bufferGame: { value: input.bufferGame ?? null, isWritable: true },
    delegationRecordGame: {
      value: input.delegationRecordGame ?? null,
      isWritable: true,
    },
    delegationMetadataGame: {
      value: input.delegationMetadataGame ?? null,
      isWritable: true,
    },
    game: { value: input.game ?? null, isWritable: true },
    ownerProgram: { value: input.ownerProgram ?? null, isWritable: false },
    delegationProgram: {
      value: input.delegationProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.ownerProgram.value) {
    accounts.ownerProgram.value =
      'Ab2xsYDGv4GKKJc2wuKiGeqtXhP6ukJFNAHXvoCBVdHG' as Address<'Ab2xsYDGv4GKKJc2wuKiGeqtXhP6ukJFNAHXvoCBVdHG'>;
  }
  if (!accounts.delegationProgram.value) {
    accounts.delegationProgram.value =
      'DELeGGvXpWV2fqJUhqcF5ZSYMS4JTLjteaAMARRSaeSh' as Address<'DELeGGvXpWV2fqJUhqcF5ZSYMS4JTLjteaAMARRSaeSh'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.bufferGame),
      getAccountMeta(accounts.delegationRecordGame),
      getAccountMeta(accounts.delegationMetadataGame),
      getAccountMeta(accounts.game),
      getAccountMeta(accounts.ownerProgram),
      getAccountMeta(accounts.delegationProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getDelegateInstructionDataEncoder().encode({}),
  } as DelegateInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountBufferGame,
    TAccountDelegationRecordGame,
    TAccountDelegationMetadataGame,
    TAccountGame,
    TAccountOwnerProgram,
    TAccountDelegationProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedDelegateInstruction<
  TProgram extends string = typeof LUDO_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    user: TAccountMetas[0];
    bufferGame: TAccountMetas[1];
    delegationRecordGame: TAccountMetas[2];
    delegationMetadataGame: TAccountMetas[3];
    /** CHECK The pda to delegate */
    game: TAccountMetas[4];
    ownerProgram: TAccountMetas[5];
    delegationProgram: TAccountMetas[6];
    systemProgram: TAccountMetas[7];
  };
  data: DelegateInstructionData;
};

export function parseDelegateInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedDelegateInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      user: getNextAccount(),
      bufferGame: getNextAccount(),
      delegationRecordGame: getNextAccount(),
      delegationMetadataGame: getNextAccount(),
      game: getNextAccount(),
      ownerProgram: getNextAccount(),
      delegationProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getDelegateInstructionDataDecoder().decode(instruction.data),
  };
}
